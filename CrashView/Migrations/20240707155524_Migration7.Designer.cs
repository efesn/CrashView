// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrashView.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240707155524_Migration7")]
    partial class Migration7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrashView.Entities.Crash", b =>
                {
                    b.Property<int>("Crash_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Crash_ID"));

                    b.Property<DateTime>("CrashDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CrashDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Person_ID")
                        .HasColumnType("int");

                    b.Property<int>("Person_Id")
                        .HasColumnType("int");

                    b.Property<int>("Race_ID")
                        .HasColumnType("int");

                    b.Property<int>("Race_ID1")
                        .HasColumnType("int");

                    b.HasKey("Crash_ID");

                    b.HasIndex("Person_Id");

                    b.HasIndex("Race_ID1");

                    b.ToTable("Crashes");
                });

            modelBuilder.Entity("CrashView.Entities.Person", b =>
                {
                    b.Property<int>("Person_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Person_Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Role_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Team_ID")
                        .HasColumnType("int");

                    b.HasKey("Person_Id");

                    b.HasIndex("Role_ID");

                    b.HasIndex("Team_ID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("CrashView.Entities.PersonTeamHistory", b =>
                {
                    b.Property<int>("PersonTeamHistory_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonTeamHistory_ID"));

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Person_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Team_ID")
                        .HasColumnType("int");

                    b.HasKey("PersonTeamHistory_ID");

                    b.HasIndex("Person_ID");

                    b.HasIndex("Team_ID");

                    b.ToTable("PersonTeamHistory");
                });

            modelBuilder.Entity("CrashView.Entities.Race", b =>
                {
                    b.Property<int>("Race_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Race_ID"));

                    b.Property<DateTime>("Race_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Race_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Season_ID")
                        .HasColumnType("int");

                    b.Property<int>("Season_ID1")
                        .HasColumnType("int");

                    b.Property<int>("Track_ID")
                        .HasColumnType("int");

                    b.Property<int>("Track_ID1")
                        .HasColumnType("int");

                    b.HasKey("Race_ID");

                    b.HasIndex("Season_ID1");

                    b.HasIndex("Track_ID1");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("CrashView.Entities.RaceResult", b =>
                {
                    b.Property<int>("RaceResult_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceResult_ID"));

                    b.Property<int>("Person_ID")
                        .HasColumnType("int");

                    b.Property<int>("Person_Id")
                        .HasColumnType("int");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Race_ID")
                        .HasColumnType("int");

                    b.Property<int>("Race_ID1")
                        .HasColumnType("int");

                    b.HasKey("RaceResult_ID");

                    b.HasIndex("Person_Id");

                    b.HasIndex("Race_ID1");

                    b.ToTable("RaceResults");
                });

            modelBuilder.Entity("CrashView.Entities.Role", b =>
                {
                    b.Property<int>("Role_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Role_ID"));

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Role_ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CrashView.Entities.Season", b =>
                {
                    b.Property<int>("Season_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Season_ID"));

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Season_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Season_ID");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("CrashView.Entities.Team", b =>
                {
                    b.Property<int>("Team_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Team_ID"));

                    b.Property<string>("Base_Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Team_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Team_ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CrashView.Entities.Track", b =>
                {
                    b.Property<int>("Track_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Track_ID"));

                    b.Property<int?>("Audience_Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fastest_Lap_Record")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number_Of_Laps")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total_Race_Length_km")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Track_Length_km")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Track_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Track_ID");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("CrashView.Entities.Crash", b =>
                {
                    b.HasOne("CrashView.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrashView.Entities.Race", "Race")
                        .WithMany()
                        .HasForeignKey("Race_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("CrashView.Entities.Person", b =>
                {
                    b.HasOne("CrashView.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("Role_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CrashView.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("Team_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CrashView.Entities.PersonTeamHistory", b =>
                {
                    b.HasOne("CrashView.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrashView.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("Team_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CrashView.Entities.Race", b =>
                {
                    b.HasOne("CrashView.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("Season_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrashView.Entities.Track", "Track")
                        .WithMany()
                        .HasForeignKey("Track_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("CrashView.Entities.RaceResult", b =>
                {
                    b.HasOne("CrashView.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrashView.Entities.Race", "Race")
                        .WithMany()
                        .HasForeignKey("Race_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Race");
                });
#pragma warning restore 612, 618
        }
    }
}
